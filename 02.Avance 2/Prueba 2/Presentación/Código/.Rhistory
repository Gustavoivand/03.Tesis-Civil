setwd("D:/03.Gits/03.Tesis Civil/02.Avance 2/Prueba 2/Presentación/Código")
#Leyendo los datos
data<-read.csv("dataset.csv")
str(data)
#Función para normalizar los datos
normalize <-function(x){
return((x-min(x))/(max(x)-min(x)))
}
#Normalizando los datos
data_norm <- as.data.frame(lapply(data, normalize))
#Histograma de deflexiones normalizado
hist(data_norm$D,col = "red")
#Normalizando los datos
data_norm <- as.data.frame(lapply(data, normalize))
#Histograma de deflexiones normalizado
hist(data_norm$MasaPropia,col = "red")
#Histograma de deflexiones normalizado
hist(data_norm$MasaPropia,col = "red")
#comparación entre datos reales y normalizados
summary(data_norm$MasaPropia)
summary(data$MasaPropia)
#Histograma de drifts Normalizado
hist(data_norm$Drift,col = "red")
#comparación entre datos reales y normalizados
summary(data_norm$Drift)
summary(data$Drift)
#Comparación de correlaciones entre datos normalizados
library(psych)
pairs.panels(data_norm)
pairs.panels(data_norm)
#Comparación de correlaciones entre datos normalizados
library(psych)
pairs.panels(data_norm[1:3])
pairs.panels(data_norm[1,3])
pairs.panels(data_norm[1;3])
pairs.panels(data_norm[c(1,3)])
pairs.panels(data_norm[1:5])
pairs.panels(data_norm[c(1,6,7,8,9)])
pairs.panels(data_norm[c(10,2)])
pairs.panels(data_norm[c(10,1)])
#Creación de datos de entrenamiento y de prueba
p<-0.75
set.seed(123)
inTraining <- sample.int(n = nrow(data_norm),
size = floor(p * nrow(data_norm)),
replace = FALSE)
data_train <- data_norm[inTraining, ]
data_test <- data_norm[-inTraining, ]
#comparación entre datos de entrenamiento y prueba
head(data_train)
head(data_test)
mlg=lm(MasaPropia ~ Drift + pc1 + pc2 + pc3 + pc4 + pv1+ pv2 +pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg = predict(mlg,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg, data_test$D)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg, data_test$D)
mlg=lm(MasaPropia ~ Drift + pc1 + pc2 + pc3 + pc4 + pv1+ pv2 +pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg = predict(mlg,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg, data_test$MasaPropia)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg, data_test$MasaPropia)
mlg=lm(MasaPropia ~ Drift,data=data_train)
#resultados del modelo
summary(mlg)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg = predict(mlg,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg, data_test$MasaPropia)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg, data_test$MasaPropia)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg = predict(mlg,newdata = data_test)
mlg=lm(MasaPropia ~ Drift**2,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ Drift*Drift,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ Drift+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ Drift+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg = predict(mlg,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg, data_test$MasaPropia)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg, data_test$MasaPropia)
mlg=lm(MasaPropia ~ I(Drif^2)+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drif^3)+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ c(Drif*Drift)+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
mlg=lm(MasaPropia ~ c(Drift*Drift)+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ c(Drift*Drift*Drift)+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ c(Drift*Drift*Drift*Drift)+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^2)+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/2))+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/4))+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(5))+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/5))+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/5)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(2)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(3)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(5)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/5)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/6)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/10)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/5)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/4)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/1)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ I(Drift^(1/4)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
mlg=lm(MasaPropia ~ pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg = predict(mlg,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg, data_test$MasaPropia)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg, data_test$MasaPropia)
mlg2=lm(Drift ~ pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
mlg2=lm(Drift ~ pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4,data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg2 = predict(mlg2,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg2, data_test$Drift)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg2, data_test$Drift)
mlg2=lm(Drift ~ I(pc1^2)+I(pc2^2)+I(pc3^2)+I(pc4^2)+I(pv1^2)+I(pv2^2)+I(pv3^2)+I(pv4^2),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg2 = predict(mlg2,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg2, data_test$Drift)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg2, data_test$Drift)
mlg2=lm(Drift ~ I(pc1^(1/2))+I(pc2^(1/2))+I(pc3^(1/2))+I(pc4^(1/2))+I(pv1^(1/2))+I(pv2^(1/2))+I(pv3^(1/2))+I(pv4^(1/2)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
mlg2=lm(Drift ~ I(pc1^(1/4))+I(pc2^(1/4))+I(pc3^(1/4))+I(pc4^(1/4))+I(pv1^(1/4))+I(pv2^(1/4))+I(pv3^(1/4))+I(pv4^(1/4)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg2 = predict(mlg2,newdata = data_test)
r<-1
r<-1
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-1.1
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-1.5
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.9
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.8
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.6
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.5
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.4
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.1
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-2
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-4
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-5
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-10
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-1
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.6
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.79
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.8
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-0.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-1
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.9
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.8
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.6
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.69
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.71
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.72
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.74
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.731
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.733
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(r))+I(pv2^(r))+I(pv3^(r))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
q<-1
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(r))+I(pv3^(q))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
q<-2
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(r))+I(pv3^(q))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
q<-3
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(r))+I(pv3^(q))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
q<-1
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(r))+I(pv3^(q))+I(pv4^(r)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
q<-1
m<-1
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
m<-.5
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
q<-1
m<-.6
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
q<-1
m<-.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
q<-1
m<-.8
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
m<-.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.7
q<-1
m<-.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
r<-.73
q<-1
m<-.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg2 = predict(mlg2,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg2, data_test$Drift)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg2, data_test$Drift)
r<-1#.73
q<-1#1
m<-1#.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg2 = predict(mlg2,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg2, data_test$Drift)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg2, data_test$Drift)
r<-.73#.73
q<-1#1
m<-1#.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg2 = predict(mlg2,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg2, data_test$Drift)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg2, data_test$Drift)
r<-.73#.73
q<-1#1
m<-.7#.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
#predicciones con el modelo creado usando los datos de prueba
predicted_mlg2 = predict(mlg2,newdata = data_test)
#coeficiente de correlación del modelo
cor(predicted_mlg2, data_test$Drift)
#Grafica de predicciones vs resultados esperados
dev.off()
plot(predicted_mlg2, data_test$Drift)
D_Target<-(0.005-min(data[1]))/(max(data[1])-min(data[1]))
r<-.73#.73
q<-1#1
m<-.7#.7
mlg2=lm(Drift ~ I(pc1^(r))+I(pc2^(r))+I(pc3^(r))+I(pc4^(r))+I(pv1^(q))+I(pv2^(m))+I(pv3^(q))+I(pv4^(m)),data=data_train)#+pc1+pc2+pc3+pc4+pv1+pv2+pv3+pv4
#resultados del modelo
summary(mlg2)
library(dplyr)
df_new <- data %>% mutate(across(c('Drift'), round, 2))
df_new <- data %>% mutate(across(c('Drift'), round, 3))
df_filtrado <- data %>% dilter(Drift==0.005)
df_filtrado <- data %>% filter(Drift==0.005)
View(df_filtrado)
View(data_norm)
View(data_test)
View(df_new)
